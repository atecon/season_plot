set verbose off
set assert stop
clear

include assertion.gfn
include string_utils.gfn

include ./src/season_plot.inp

check_type("obsmajor")
check_type("obsminor")
check_type("obsmicro")
check_type("all")
catch check_type("foo")
assert($error != FALSE)

open jgm-data.gdt -q -p
function void test_flag_frequency_comps_an (const series y)
    print "Start testing flag_frequency_components()"
    print "Annual data"

    bundle B = null
    flag_frequency_components(y, &B)

    assert_false(B.frequency_components.obsmajor)
    assert_false(B.frequency_components.obsminor)
    assert_false(B.frequency_components.obsmicro)
    assert_equal_num(nelem(B.frequency_components), 3)
end function
test_flag_frequency_comps_an(r_s)


open denmark.gdt -q -p
function void test_flag_frequency_comps_qrt (const series y)
    print "Start testing flag_frequency_components()"
    print "Quarterly data"

    bundle B = null
    flag_frequency_components(y, &B)

    assert_true(B.frequency_components.obsmajor)
    assert_true(B.frequency_components.obsminor)
    assert_false(B.frequency_components.obsmicro)
    assert_equal_num(nelem(B.frequency_components), 3)
end function
test_flag_frequency_comps_qrt(LRM)


open djclose.gdt -q -p
function void test_flag_frequency_comps_day (const series y)
    print "Start testing flag_frequency_components()"
    print "Daily data"

    bundle B = null
    flag_frequency_components(y, &B)

    assert_true(B.frequency_components.obsmajor)
    assert_true(B.frequency_components.obsminor)
    assert_true(B.frequency_components.obsmicro)
    assert_equal_num(nelem(B.frequency_components), 3)
end function
test_flag_frequency_comps_day(djclose)


open denmark.gdt -q -p
function void test_get_frequency_series_qrt (const series y)
    print "Start testing test_get_frequency_series()"
    print "Quarterly data"

    bundle B = null
    flag_frequency_components(y, &B)

    list L = get_frequency_series(&B)

    assert_equal_num(nelem(L), 2)
    assert_true(inlist(L, "obsmajor"))
    assert_true(inlist(L, "obsminor"))
end function
test_get_frequency_series_qrt(LRM)

open djclose.gdt -q -p
function void test_get_frequency_series_day (const series y)
    print "Start testing test_get_frequency_series()"
    print "Daily data"

    bundle B = null
    flag_frequency_components(y, &B)

    list L = get_frequency_series(&B)

    assert_equal_num(nelem(L), 3)
    assert_true(inlist(L, "obsmajor"))
    assert_true(inlist(L, "obsminor"))
    assert_true(inlist(L, "obsmicro"))
end function
test_get_frequency_series_day(djclose)



open denmark.gdt -q -p
function void test_get_frequency_strings_qrt (const series y)
    print "Start testing get_frequency_strings()"
    print "Quarterly data"

    bundle B = null
    get_frequency_strings(&B)

    assert_equal_num(nelem(B), 1)
    assert_equal_num(nelem(B.frequency_strings), 2)

    assert_equal_str(B.frequency_strings.obsmajor, "Year")
    assert_equal_str(B.frequency_strings.obsminor, "Quarter")
end function
test_get_frequency_strings_qrt(LRM)


open data9-13.gdt -q -p
function void test_get_frequency_strings_mth (const series y)
    print "Start testing get_frequency_strings()"
    print "Monthly data"

    bundle B = null
    get_frequency_strings(&B)

    assert_equal_num(nelem(B), 1)
    assert_equal_num(nelem(B.frequency_strings), 2)

    assert_equal_str(B.frequency_strings.obsmajor, "Year")
    assert_equal_str(B.frequency_strings.obsminor, "Month")
end function
test_get_frequency_strings_mth(bkret)


open djclose.gdt -q -p
function void test_get_frequency_strings_mth (const series y)
    print "Start testing get_frequency_strings()"
    print "Daily data"

    bundle B = null
    get_frequency_strings(&B)

    assert_equal_num(nelem(B), 1)
    assert_equal_num(nelem(B.frequency_strings), 3)

    assert_equal_str(B.frequency_strings.obsmajor, "Year")
    assert_equal_str(B.frequency_strings.obsminor, "Month")
    assert_equal_str(B.frequency_strings.obsmicro, "Day")
end function
test_get_frequency_strings_mth(djclose)


function void test_add_frequency_case_bundles (void)
    print "Start testing add_frequency_case_bundles()"

    # Case a
    bundle B = null
    bundle B.y_grouped_by_frequency = null
    add_frequency_case_bundles(&B, "a")

    assert_true(inbundle(B.y_grouped_by_frequency, "case_a"))
    assert_false(inbundle(B.y_grouped_by_frequency, "case_b"))
    assert_false(inbundle(B.y_grouped_by_frequency, "case_c"))

    assert_equal_num(nelem(B.y_grouped_by_frequency.case_a), 2)

    assert_true(inbundle(B.y_grouped_by_frequency.case_a, "frequency_1"))
    assert_true(inbundle(B.y_grouped_by_frequency.case_a, "frequency_2"))

    assert_equal_str(B.y_grouped_by_frequency.case_a.frequency_1, "obsmajor")
    assert_equal_str(B.y_grouped_by_frequency.case_a.frequency_2, "obsminor")

    # Case B
    bundle B = null
    bundle B.y_grouped_by_frequency = null
    add_frequency_case_bundles(&B, "b")
    assert_equal_str(B.y_grouped_by_frequency.case_b.frequency_1, "obsmajor")
    assert_equal_str(B.y_grouped_by_frequency.case_b.frequency_2, "obsmicro")

    # Case C
    bundle B = null
    bundle B.y_grouped_by_frequency = null
    add_frequency_case_bundles(&B, "c")
    assert_equal_str(B.y_grouped_by_frequency.case_c.frequency_1, "obsminor")
    assert_equal_str(B.y_grouped_by_frequency.case_c.frequency_2, "obsmicro")
end function
test_add_frequency_case_bundles()


function void test_multiplot_settings (void)
    print "Start testing multiplot_settings()"

    bundle B = multiplot_settings()

    assert_equal_num(B.plot_width, 900)
    assert_equal_num(B.plot_height, 600)
    assert_equal_num(B.font_size, 12)
end function
test_multiplot_settings()


function void test_sublot_order (void)
    print "Start testing sublot_order()"

    strings S = sublot_order()

    assert_equal_num(nelem(S), 6)
    assert_equal_str(S[1], "obsmajor_by_obsminor")
    assert_equal_str(S[2], "obsmajor_by_obsmicro")
    assert_equal_str(S[3], "obsminor_by_obsmajor")
    assert_equal_str(S[4], "obsminor_by_obsmicro")
    assert_equal_str(S[5], "obsmicro_by_obsmajor")
    assert_equal_str(S[6], "obsmicro_by_obsminor")
end function
test_sublot_order()



nulldata 8
set seed 1234
setobs 4 2020:01 --time-series
series y = seq(1, $nobs)
series obsmajor = vec({1, 1, 1, 1, 2, 2, 2, 2})
series obsminor = vec({1, 2, 1, 2, 1, 2, 1, 2})

list L = y obsmajor obsminor
function void test_group_y_by_freq_n_obsmicro (const list L)
    print "Start testing group_y_by_freq_no_obsmicro()"

    bundle B = null
    bundle B.y_grouped_by_frequency = null
    list B.frequency_series = L

    group_y_by_freq_no_obsmicro(L.y, &B)

    assert_true(inbundle(B.y_grouped_by_frequency.case_a, "matdata"))
    matrix m = B.y_grouped_by_frequency.case_a.matdata
    assert_equal_num(cols(m), 4)
    assert_equal_num(rows(m), 32)
    assert_equal_str(cnameget(m)[1], "y")
    assert_equal_str(cnameget(m)[2], "obsmajor")
    assert_equal_str(cnameget(m)[3], "obsminor")
    assert_equal_str(cnameget(m)[4], "f(x)")

    assert_equal_num(m[1, 4], 1)
    assert_false(ok(m[2, 4]))
    assert_equal_num(m[32, 4], 8)

        /* Matrix "m"
          y     obsmajor     obsminor         f(x)
           1            1            1            1
           1            1            2          nan
           1            2            1          nan
           1            2            2          nan
           2            1            1          nan
           2            1            2            2
           2            2            1          nan
           2            2            2          nan
           3            1            1            3
           3            1            2          nan
           3            2            1          nan
           3            2            2          nan
           4            1            1          nan
           4            1            2            4
           4            2            1          nan
           4            2            2          nan
           5            1            1          nan
           5            1            2          nan
           5            2            1            5
           5            2            2          nan
           6            1            1          nan
           6            1            2          nan
           6            2            1          nan
           6            2            2            6
           7            1            1          nan
           7            1            2          nan
           7            2            1            7
           7            2            2          nan
           8            1            1          nan
           8            1            2          nan
           8            2            1          nan
           8            2            2            8
    */
end function
test_group_y_by_freq_n_obsmicro(L)



nulldata 14
set seed 1234
setobs 7 2020-01-01 --time-series
series y = seq(1, $nobs)
series obsmajor = ones($nobs, 1)
series obsminor = ones($nobs, 1)
series obsmicro = seq(1, $nobs)'
list L = y obsmajor obsminor obsmicro
function void test_group_y_by_freq_w_obsmicro (const list L)
    print "Start testing group_y_by_freq_with_obsmicro()"


    bundle B = null
    bundle B.y_grouped_by_frequency = null
    list B.frequency_series = L

    group_y_by_freq_with_obsmicro(L.y, &B)

    assert_true(inbundle(B.y_grouped_by_frequency.case_a, "matdata"))
    assert_true(inbundle(B.y_grouped_by_frequency.case_b, "matdata"))
    assert_true(inbundle(B.y_grouped_by_frequency.case_c, "matdata"))


    matrix m_case_a = B.y_grouped_by_frequency.case_a.matdata
    assert_equal_num(cols(m_case_a), 4)
    assert_equal_num(rows(m_case_a), 14)
    assert_equal_str(cnameget(m_case_a)[1], "y")
    assert_equal_str(cnameget(m_case_a)[2], "obsmajor")
    assert_equal_str(cnameget(m_case_a)[3], "obsminor")
    assert_equal_str(cnameget(m_case_a)[4], "f(x)")
    assert_equal_num(m_case_a[1, 4], 1)
    assert_equal_num(m_case_a[14, 4], 14)

    matrix m_case_b = B.y_grouped_by_frequency.case_b.matdata
    assert_equal_num(cols(m_case_b), 4)
    assert_equal_num(rows(m_case_b), 196)
    assert_equal_str(cnameget(m_case_b)[1], "y")
    assert_equal_str(cnameget(m_case_b)[2], "obsmajor")
    assert_equal_str(cnameget(m_case_b)[3], "obsmicro")
    assert_equal_str(cnameget(m_case_b)[4], "f(x)")
    assert_equal_num(m_case_b[1, 4], 1)
    assert_equal_num(m_case_b[196, 4], 14)

    matrix m_case_c = B.y_grouped_by_frequency.case_c.matdata
    assert_equal_num(cols(m_case_c), 4)
    assert_equal_num(rows(m_case_c), 196)
    assert_equal_str(cnameget(m_case_c)[1], "y")
    assert_equal_str(cnameget(m_case_c)[2], "obsminor")
    assert_equal_str(cnameget(m_case_c)[3], "obsmicro")
    assert_equal_str(cnameget(m_case_c)[4], "f(x)")
    assert_equal_num(m_case_c[1, 4], 1)
    assert_equal_num(m_case_c[196, 4], 14)
end function
test_group_y_by_freq_w_obsmicro(L)


function void test_drop_count_column (void)
    print "Start testing drop_count_column()"

    matrix m = mnormal(4,2)
    cnameset(m, "foo count")
    matrix m_new = drop_count_column(m)
end function
test_drop_count_column()


function void test_pivot_by_column_name (void)
    print "Start testing pivot_by_column_name()"

    bundle B = null
    bundle B.frequency_strings = null
    string B.frequency_strings.column = "Q"
    matrix m = {1, 1, 0;\
                1, 2, 1;\
                1, 3, 2;\
                2, 1, 3;\
                2, 2, 4;\
                2, 3, 5}

    cnameset(m, "index column values")

    matrix r = pivot_by_column_name(m, "index", "column", "values", B)
    strings cnames = cnameget(r)

    assert_equal_num(rows(r), 2)
    assert_equal_num(cols(r), 4)
    assert_equal_str(cnames[1], "Q1")
    assert_equal_str(cnames[2], "Q2")
    assert_equal_str(cnames[3], "Q3")
    assert_equal_str(cnames[4], "index")

    assert_equal_num(r[1,1], 0)
    assert_equal_num(r[2,1], 3)
    assert_equal_num(r[1,2], 1)
    assert_equal_num(r[2,2], 4)
    assert_equal_num(r[1,3], 2)
    assert_equal_num(r[2,3], 5)
end function
test_pivot_by_column_name()

function void test_get_plot_opts_from_self (void)
    print "Start testing get_plot_opts_from_self()"

    bundle B = null
    bundle R = get_plot_opts_from_self(B)
    assert_equal_num(nelem(R), 0)

    bundle B = defbundle("font_size", 5)
    bundle R = get_plot_opts_from_self(B)
    assert_equal_num(nelem(R), 1)

    assert_equal_num(B.font_size, 5)
end function
test_get_plot_opts_from_self()


function void test_do_pivoting (void)
    print "Start testing do_pivoting()"
    print "PASS"
end function
test_do_pivoting()


function void test_compile_subplots (void)
    print "Start testing compile_subplots()"
    print "PASS"        # tricky to test
end function
test_compile_subplots()


function void test_seasplot (void)
    print "Start testing seasplot()"
    print "PASS"        # nothing to test
end function
test_seasplot()

function void test_do_season_plot (void)
    print "Start testing do_season_plot()"
    print "PASS"        # tricky to test
end function
test_do_season_plot()





printf "\nInfo: All tests passed.\n"
