<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="season_plot" needs-time-series-data="true" minver="2020b">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2020-08-17</date>
<description>Plot seasonal time-series components</description>
<tags>C22</tags>
<label>Season Plot</label>
<menu-attachment>MAINWIN/View/GraphVars</menu-attachment>
<help>
Plot seasonal components of a time-series by frequency groups.

This package computes and depicts a time-series across sub-periods, also
called a Buys-Ballot plot.

For instance, if one has a quarterly time-series one can plot the dynamics of each quarter across years. Vice versa, you may also be interested in plotting the dynamics of each year's quarter.

Note, you may also try the user-written gretl package &quot;buys_ballot&quot; written by Ignacio Diaz-Emparanza and Riccardo (Jack) Lucchetti. It essentially shares similar features but does not support all frequency combinations.

You can also call the functionalities via the GUI menu
&quot;View -&gt; Graph specified vars -&gt; Season Plot&quot;.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/seasonal_plot

The package comprises the three public functions set_season_plot(), plot_season_plot() and season_plot_gui(). The season_plot_gui() function is mainly a wrapper for GUI access but may be also called via scripting as a &quot;short-cut&quot; way for immediately showing a plot on the screen.

The set_season_plot() function sets all necessary information, runs some checks and computes the matrices holding the actual results. Informations is stored in a bundle. The function plot_season_plot() calls this bundle and plots the requested result. Due to this two-step approach, the necessary computation has to be done only once.


PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       set_season_plot(const series y, const string name_y[null])
Arguments:
y:              series, Variable of interest
name_y:         string, Pass name of series 'y' (optional) -- only relevant
                for GUI wrapper and not for the user.

This function initializes various things and computes the pivoted matrices.

Return:
Bundle comprising the various items. You may be interested in the pivoted
matrices stored under: &lt;BUNDLE_NAME&gt;[&quot;data_to_plot&quot;]
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       plot_season_plot (const bundle self, const string type,
                string filename[null])

Arguments:
self:          bundle, Bundle returned by set_season_plot() function. The
               user may add variables parameters for fine-tuning the plot
               before passing it to the plot_season_plot() function (see
               below for details, optional)
type:          string, String referring to the frequency component to show
               on the x-axis of the plot, either 'obsmajor', 'obsminor'
               or 'obsmicro'.
filename:      string, Full path and file name for storing plot.

Return:
No return value.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:      season_plot_gui (const series y, int frequency, const int
               PLOT_WIDTH, const int PLOT_HEIGHT, const int FONT_SIZE)

Arguments:
y:             series, Variable of interest
frequency:     int, Select frequency component, 1=obsmajor, 2=obsminor,
               3=obsmicro (default 1)
PLOT_WIDTH:    int, control width of the plot (default 900)
PLOT_HEIGHT:   int, control height of the plot (default 600)
FONT_SIZE:     int, control font size (default 12)

Return:
No return value. Instant plot on screen.
-----------------------------------------------------------------------


Notes on frequency components
-----------------------------
For details on frequency components, we refer to the gretl help. For instance check the help for the &quot;$obsmajor&quot; accessor (&lt;help $obsmajor&gt;). For most standard time-series frequencies, 'obsmajor' refers to the year, 'obsminor' to the quarter or month, and 'obsmicro' to the day of a month.

Things are different, when working with hourly data. In this case 'obsmajor' refers to the day and 'obsminor' to the hour ('obsmicro' is not defined for this frequency).

Non-standard frequencies set manually with the 'setobs' command may or may not work. In such cases please think in terms of major and minor frequency components and disregard the standard frequency labels in this package.



The optional parameters for controlling multiplot output:
---------------------------------------------------------
The user can pass the following optional parameters before calling the function plot_seasonal_plot():

* PLOT_WIDTH:        int, Control width of the plot (default 900)
* PLOT_HEIGHT:       int, Control height of the plot (default 600)
* FONT_SIZE:         int, Control font site (default 12)


Changelog:
- v0.1, August 2020:
    + initial release
</help>
<depends count="2">
string_utils multiplot </depends>
<gretl-function name="set_season_plot" type="bundle">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="name_y" type="string" optional="true" const="true">
<description>Only for GUI access</description>
  </param>
 </params>
<code>/*  Compile matrices holding grouped data for plotting. */
errorif($datatype != 2, &quot;Time-series data set needed.&quot;)
errorif($pd == 1, &quot;Time-series has no seasonal frequency.&quot;)
check_multiplot_version()
smpl y --contiguous
# Initializations
bundle self = null
string self.name_y = (exists(name_y) ? name_y : argname(y))
flag_frequency_components(y, &amp;self)
list self.frequency_series = get_frequency_series(&amp;self)
get_frequency_strings(&amp;self)
group_y_by_frequencies(y, &amp;self)
do_pivoting(y, &amp;self)
compile_subplots(&amp;self)
return self
</code>
</gretl-function>
<gretl-function name="plot_season_plot" type="void">
 <params count="3">
  <param name="self" type="bundle" const="true"/>
  <param name="type" type="string" const="true">
<description>Freq. to show on x-axis</description>
  </param>
  <param name="filename" type="string" optional="true"/>
 </params>
<code>/* Do actualy plotting. User selects which frequency component to put on the x-axis. */
string filename = (exists(filename)) ? filename : &quot;display&quot;
strings to_be_plotted = array(0)
strings gp_filenames = self.gp_filenames
bundle plot_opts = get_plot_opts_from_self(self)
bundle plot_opts = (exists(plot_opts)) ? plot_opts : null
bundle plot_opts = plot_opts + multiplot_settings()
if self.frequency_components.obsmicro == FALSE
  errorif(instring(type, &quot;micro&quot;), &quot;Data set has not 'obsmicro' frequency component.&quot;)
endif
loop foreach i gp_filenames
  if instring(&quot;$i&quot;, sprintf(&quot;%s_by&quot;, type))
    to_be_plotted = to_be_plotted + &quot;$i&quot;
  endif
endloop
multiplot(to_be_plotted, filename, nelem(to_be_plotted), 1, plot_opts)
</code>
</gretl-function>
<gretl-function name="season_plot_gui" type="void" pkg-role="gui-main">
 <params count="5">
  <param name="y" type="series" const="true"/>
  <param name="Frequency" type="int" min="1" max="3" default="1">
<description>Freq. to _show on x-axis</description>
<labels count="3">
"major (usually year)" "minor (usually Q or M)" "micro (usually day)" </labels>
  </param>
  <param name="PLOT_WIDTH" type="int" min="600" default="900" const="true">
<description>Width of plot</description>
  </param>
  <param name="PLOT_HEIGHT" type="int" min="400" default="600" const="true">
<description>Height of plot</description>
  </param>
  <param name="FONT_SIZE" type="int" min="6" default="12" const="true">
<description>Font size</description>
  </param>
 </params>
<code>/* Helper function for GUI access. */
bundle opts = defbundle( &quot;PLOT_WIDTH&quot;, PLOT_WIDTH, &quot;PLOT_HEIGHT&quot;, PLOT_HEIGHT, &quot;FONT_SIZE&quot;, FONT_SIZE)
if Frequency == 1
  string type = &quot;obsmajor&quot;
elif Frequency == 2
  string type = &quot;obsminor&quot;
elif Frequency == 3
  string type = &quot;obsmicro&quot;
endif
bundle B = set_season_plot(y, argname(y)) + opts
plot_season_plot(B, type, &quot;display&quot;)
</code>
</gretl-function>
<gretl-function name="check_multiplot_version" type="void" private="1">
<code>/* */
pkg query multiplot --quiet
errorif($result.version &lt; 0.2, &quot;Update the multiplot package to version 0.2, please.&quot;)
</code>
</gretl-function>
<gretl-function name="get_plot_opts_from_self" type="bundle" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Put passed parameters for multiplot() function into a separate bundle. */
bundle B = null
strings valid_keys = getkeys(multiplot_settings())
loop foreach i valid_keys
  if inbundle(self, &quot;$i&quot;)
    B[&quot;$i&quot;] = self[&quot;$i&quot;]
  endif
endloop
return B
</code>
</gretl-function>
<gretl-function name="multiplot_settings" type="bundle" private="1">
<code>/* Settings for multiplot. */
bundle opts = null
scalar opts.PLOT_WIDTH = 900
scalar opts.PLOT_HEIGHT = 600
scalar opts.FONT_SIZE = 12
return opts
</code>
</gretl-function>
<gretl-function name="do_pivoting" type="void" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper for calling the actual pivoting steps. */
bundle self.data_to_plot = null
strings cases = getkeys(self.y_grouped_by_frequency)
loop foreach i cases
  # Retrieve information
  string s1 = self.y_grouped_by_frequency[&quot;$i&quot;].frequency_1
  string s2 = self.y_grouped_by_frequency[&quot;$i&quot;].frequency_2
  # loop over two combinations, e.g. major-minor, minor-major
  loop j=1..2
    string first = (j == 1) ? s1 : s2
    string second = (j == 1) ? s2 : s1
    string name = sprintf(&quot;mplot_%s_by_%s&quot;, first, second)
    matrix self.data_to_plot.@name = pivot_by_column_name(self.y_grouped_by_frequency[&quot;$i&quot;].matdata, first, second, &quot;f(x)&quot;, self)
  endloop
endloop
</code>
</gretl-function>
<gretl-function name="get_frequency_strings" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Get string abbreviations for each frequency component. */
if maxr($pd .= {5, 6, 7})
  bundle self.frequency_strings = defbundle( &quot;obsmajor&quot;, &quot;Year&quot;, &quot;obsminor&quot;, &quot;Month&quot;, &quot;obsmicro&quot;, &quot;Day&quot;)
elif $pd == 12
  bundle self.frequency_strings = defbundle( &quot;obsmajor&quot;, &quot;Year&quot;, &quot;obsminor&quot;, &quot;Month&quot;)
elif $pd == 4
  bundle self.frequency_strings = defbundle( &quot;obsmajor&quot;, &quot;Year&quot;, &quot;obsminor&quot;, &quot;Quarter&quot;)
endif
</code>
</gretl-function>
<gretl-function name="pivot_by_column_name" type="matrix" private="1">
 <params count="5">
  <param name="m" type="matrix" const="true"/>
  <param name="index" type="string" const="true">
<description>Column to use for new index, xaxis</description>
  </param>
  <param name="split_column" type="string" const="true">
<description>Add columns using distinct values</description>
  </param>
  <param name="values" type="string" const="true">
<description>Column to use for populating new matrix values</description>
  </param>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Transform matrix from long to wide format; also known as pivoting. Inspired by Pandas' pivot() function:
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html
*/
string frequency_label = substr(self.frequency_strings[&quot;@split_column&quot;], 1, 1)
matrix result = {}
scalar pos_values = instrings(cnameget(m), values)
scalar pos_split_column = instrings(cnameget(m), split_column)
scalar pos_index_column = instrings(cnameget(m), index)
matrix split_values = values(m[, pos_split_column])
strings colnames = array(1 + rows(split_values))
# Drop split column from &quot;m&quot;
matrix split_vector = m[, pos_split_column]
matrix values_vector = m[, pos_values]
matrix index_vector = values(m[, pos_index_column]) # will be the x-axis in the following plot
loop i = 1..rows(split_values)
  matrix mask = (split_vector .= split_values[i])
  result ~= selifr(values_vector, mask)
  colnames[i] = sprintf(&quot;%s%d&quot;, frequency_label, split_values[i])
endloop
result ~= index_vector
colnames[1 + rows(split_values)] = cnameget(m, pos_index_column)
cnameset(result, colnames)
return result
</code>
</gretl-function>
<gretl-function name="group_y_by_frequencies" type="void" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper for grouping y by frequencies dependent on data set. */
bundle self.y_grouped_by_frequency = null
if self.frequency_components.obsmicro == FALSE
  group_y_by_freq_no_obsmicro(y, &amp;self)
else
  group_y_by_freq_with_obsmicro(y, &amp;self)
endif
</code>
</gretl-function>
<gretl-function name="add_frequency_case_bundles" type="void" private="1">
 <params count="2">
  <param name="self" type="bundleref"/>
  <param name="case" type="string">
<description>a, b or c</description>
  </param>
 </params>
<code>/* Compile bundle holding the keywords for both frequencies needed for grouping. */
if case == &quot;a&quot;
  bundle self.y_grouped_by_frequency.case_a = defbundle( &quot;frequency_1&quot;, &quot;obsmajor&quot;, &quot;frequency_2&quot;, &quot;obsminor&quot;)
elif case == &quot;b&quot;
  bundle self.y_grouped_by_frequency.case_b = defbundle( &quot;frequency_1&quot;, &quot;obsmajor&quot;, &quot;frequency_2&quot;, &quot;obsmicro&quot;)
elif case == &quot;c&quot;
  bundle self.y_grouped_by_frequency.case_c = defbundle( &quot;frequency_1&quot;, &quot;obsminor&quot;, &quot;frequency_2&quot;, &quot;obsmicro&quot;)
endif
</code>
</gretl-function>
<gretl-function name="group_y_by_freq_no_obsmicro" type="void" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Group y by obsmajor and obsminor. This is only relevant in case data set has no obsmicro structure -- simplest case. */
add_frequency_case_bundles(&amp;self, &quot;a&quot;)
matrix m = aggregate(y, self.frequency_series, mean)
matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)
</code>
</gretl-function>
<gretl-function name="group_y_by_freq_with_obsmicro" type="void" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* More complicate case, as we need to &quot;aggregate out&quot; one of the frequency structures before grouping. Aggregation is done by summing. */
# 1) mplot_obsmajor_by_obsminor --&gt; aggregate across obsmicro
add_frequency_case_bundles(&amp;self, &quot;a&quot;)
list groupby = self.frequency_series
groupby -= obsmicro
matrix m = aggregate(y, groupby, sum)
matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)
# 2) mplot_obsmajor_by_obsmicro --&gt; aggregate across obsminor
add_frequency_case_bundles(&amp;self, &quot;b&quot;)
list groupby = self.frequency_series
groupby -= obsminor
matrix m = aggregate(y, groupby, sum)
matrix self.y_grouped_by_frequency.case_b.matdata = drop_count_column(m)
# 3) mplot_obsminor_by_obsmicro --&gt; aggregate across obsmajor
add_frequency_case_bundles(&amp;self, &quot;c&quot;)
list groupby = self.frequency_series
groupby -= obsmajor
matrix m = aggregate(y, groupby, sum)
matrix self.y_grouped_by_frequency.case_c.matdata = drop_count_column(m)
</code>
</gretl-function>
<gretl-function name="drop_count_column" type="matrix" private="1">
 <params count="1">
  <param name="m" type="matrix"/>
 </params>
<code>/* Drop &quot;count&quot; column. */
cnames_old = cnameget(m)
scalar pos = instrings(cnames_old, &quot;count&quot;)     # breaks of no 'count' col exists
cnames_new = strdrop(cnames_old, &quot;count&quot;)
m = m[,-pos]
cnameset(m, cnames_new)
return m
</code>
</gretl-function>
<gretl-function name="sublot_order" type="strings" private="1">
<code>/* Set the order for subplots. */
strings sublot_order = defarray( &quot;obsmajor_by_obsminor&quot;, &quot;obsmajor_by_obsmicro&quot;, &quot;obsminor_by_obsmajor&quot;, &quot;obsminor_by_obsmicro&quot;, &quot;obsmicro_by_obsmajor&quot;, &quot;obsmicro_by_obsminor&quot;)
return sublot_order
</code>
</gretl-function>
<gretl-function name="compile_subplots" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Compile all combinations of plots and store gp-file names */
scalar n_combinations = nelem(getkeys(self.data_to_plot))
strings sublot_combs = sublot_order()
scalar counter = 1
strings self.gp_filenames = array(0)
loop foreach i sublot_combs
  string matname = sprintf(&quot;mplot_%s&quot;, sublot_combs[i])
  if inbundle(self.data_to_plot, @matname)
    # a matrix with a single row cannot be drawn
    if rows(self.data_to_plot[matname]) &gt; 1
      self.gp_filenames = self.gp_filenames + sprintf(&quot;seasplot_%s.gp&quot;, sublot_combs[i])
      seasplot(matname, counter, self)
      counter++
    endif
  endif
  if counter &gt; n_combinations
    break
  endif
endloop
</code>
</gretl-function>
<gretl-function name="seasplot" type="void" private="1">
 <params count="3">
  <param name="matname" type="string" const="true"/>
  <param name="gpfile_id" type="int" const="true"/>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Execute actual plotting. */
string filename = self.gp_filenames[gpfile_id]
matrix m = self.data_to_plot[matname]
strings cnames = cnameget(m)
plot m
  options with-lp fit=none
  printf &quot;set xlabel '%s'&quot;, self.frequency_strings[cnames[nelem(cnames)]]
  printf &quot;set ylabel '%s'&quot;, self.name_y
  literal set grid
end plot --output=&quot;@filename&quot;
</code>
</gretl-function>
<gretl-function name="get_frequency_series" type="list" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Retrieve up to 3 frequency series. */
list L = null
strings keys = getkeys(self.frequency_components)
loop foreach i keys
  if self.frequency_components[&quot;$i&quot;] == TRUE
    string vname = sprintf(&quot;$%s&quot;, &quot;$i&quot;)
    list L += genseries(&quot;$i&quot;, @vname)
  endif
endloop
return L
</code>
</gretl-function>
<gretl-function name="flag_frequency_components" type="void" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Set flags for the 3 separate frequency components. */
bundle self.frequency_components = defbundle( &quot;obsmajor&quot;, FALSE, &quot;obsminor&quot;, FALSE, &quot;obsmicro&quot;, FALSE)
if $pd &gt; 1
  self.frequency_components.obsmajor = TRUE
  self.frequency_components.obsminor = TRUE
endif
if maxr($pd .= {5, 6, 7})
  self.frequency_components.obsmicro = TRUE
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include season_plot.gfn


# Select a data set
scalar run_example = 1

if run_example == 1
    open data9-13.gdt -p -q  # monthly
    series y = bkret

elif run_example == 2
    open AWM18.gdt -p -q     # quarterly
    series y = ldiff(HICP)

elif run_example == 3
    open djclose.gdt -q -p
    series y = djclose       # 5 days business week
endif


# prepare everyting
bundle b = set_season_plot(y)


# Start plotting for difference frequency components
plot_season_plot(b, &quot;obsmajor&quot;, &quot;season_plot_obsmajor.png&quot;)
plot_season_plot(b, &quot;obsminor&quot;, &quot;season_plot_obsminor.png&quot;)
if max($pd .= {5,6,7})
    plot_season_plot(b, &quot;obsmicro&quot;, &quot;season_plot_obsmicro.png&quot;)
endif

# Optional: Example on how to configure multiplot font size
# Fine tune plot by controlling parameters
scalar b.PLOT_WIDTH = 900
scalar b.FONT_SIZE = 8
plot_season_plot(b, &quot;obsmajor&quot;, &quot;season_plot_obsmajor_small_font.png&quot;)


# You may want to look at the pivoted matrices
# eval b.data_to_plot
# eval b.data_to_plot.mplot_obsminor_by_obsmajor


# Optionally, instantly show some plot
# season_plot_gui(y, 2)  # 1=obsmajor, 2=obsminor, 3=obsmicro
</sample-script>
</gretl-function-package>
</gretl-functions>
