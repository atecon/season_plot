function bundle set_season_plot (const series y)
    /*  Compile matrices holding grouped data for plotting. */

    errorif($datatype != 2, "Time-series data set needed.")
    errorif($pd == 1, "Time-series has no seasonal frequency.")

    smpl y --contiguous

    # Initializations
    bundle self = null
    string yname = argname(y)

    flag_frequency_components(y, &self)

    list self.frequency_series = get_frequency_series(&self)

    get_frequency_strings(&self)

    group_y_by_frequencies(y, &self)

    do_pivoting(y, &self)

    compile_subplots(&self)

    return self
end function


function void plot_season_plot (const bundle self,
                                const string type "Freq. to show on x-axis",
                                string filename[null],
                                bundle plot_opts[null] "multiplot() settings")
    /* Do actualy plotting. User selects which frequency component to put on the x-axis. */

    string filename = (exists(filename)) ? filename : "display"
    strings to_be_plotted = array(0)
    strings gp_filenames = self.gp_filenames
    bundle plot_opts = (exists(plot_opts)) ? plot_opts : null
    bundle plot_opts = plot_opts + multiplot_settings()

    if self.frequency_components.obsmicro == FALSE
        errorif(instring(type, "micro"), "Data set has not 'obsmicro' frequency component.")
    endif

    loop foreach i gp_filenames
        if instring("$i", sprintf("%s_by", type))
            to_be_plotted = to_be_plotted + "$i"
        endif
    endloop

    multiplot(to_be_plotted, filename, nelem(to_be_plotted), 1, plot_opts)
end function


function bundle multiplot_settings (void)
    /* Settings for multiplot. */

    bundle opts = null
    scalar opts.PLOT_WIDTH = 1000
    scalar opts.PLOT_HEIGHT = 600
    scalar opts.FONT_SIZE = 12

    return opts
end function


function void do_pivoting (const series y, bundle *self)
    /* Wrapper for calling the actual pivoting steps. */

    bundle self.data_to_plot = null
    strings cases = getkeys(self.y_grouped_by_frequency)

    loop foreach i cases
        # Retrieve information
        string s1 = self.y_grouped_by_frequency["$i"].frequency_1
        string s2 = self.y_grouped_by_frequency["$i"].frequency_2

        # loop over two combinations, e.g. major-minor, minor-major
        loop j=1..2
            string first = (j == 1) ? s1 : s2
            string second = (j == 1) ? s2 : s1
            string name = sprintf("mplot_%s_by_%s", first, second)

            matrix self.data_to_plot.@name = pivot_by_column_name(self.y_grouped_by_frequency["$i"].matdata, first, second, "f(x)", self)
        endloop
    endloop
end function


function void get_frequency_strings (bundle *self)
    /* Get string abbreviations for each frequency component. */

    if maxr($pd .= {5, 6, 7})
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Y",
                                        "obsminor", "M",
                                        "obsmicro", "D")
    elif $pd == 12
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Y",
                                        "obsminor", "M")
    elif $pd == 4
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Y",
                                        "obsminor", "Q")
    endif
end function


# TODO: put into separate small package
# TODO: add another function pivot() where column indizes instead of names are passed
# TODO: Both 'column' and 'values' may be arrays.
function matrix pivot_by_column_name (const matrix m,
                        const string index "Column to use for new index, xaxis",
                        const string split_column "Add columns using distinct values",
                        const string values "Column to use for populating new matrix values",
                        const bundle self)
    /* Transform matrix from long to wide format; also known as pivoting. Inspired by Pandas' pivot() function:
    https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html
    */

    scalar n_cols = cols(m)
    errorif(n_cols < 3, "Matrix must comprise at least 3 columns.")

    string frequency_label = self.frequency_strings["@split_column"]

    scalar pos_values = instrings(cnameget(m), values)
    scalar pos_split_column = instrings(cnameget(m), split_column)
    scalar pos_index_column = instrings(cnameget(m), index)

    matrix split_values = values(m[, pos_split_column])
    strings colnames = array(1 + rows(split_values))

    # Drop split column from "m"
    matrix split_vector = m[, pos_split_column]
    matrix values_vector = m[, pos_values]
    matrix index_vector = values(m[, pos_index_column]) # will be the x-axis in the following plot

    matrix result = {}
    loop i = 1..rows(split_values)
        matrix mask = (split_vector .= split_values[i])
        result ~= selifr(values_vector, mask)
        colnames[i] = sprintf("%s%d", frequency_label, split_values[i])
    endloop

    result ~= index_vector
    colnames[1 + rows(split_values)] = cnameget(m, pos_index_column)
    cnameset(result, colnames)

    return result
end function


function void group_y_by_frequencies (const series y,
                                      bundle *self)
    /* Wrapper for grouping y by frequencies dependent on data set. */

    bundle self.y_grouped_by_frequency = null

    if self.frequency_components.obsmicro == FALSE
        group_y_by_freq_no_obsmicro(y, &self)
    else
        group_y_by_freq_with_obsmicro(y, &self)
    endif
end function


function void group_y_by_freq_no_obsmicro (const series y,
                                          bundle *self)
    /* Group y by obsmajor and obsminor. This is only relevant in case data set has no obsmicro structure -- simplest case. */

    bundle self.y_grouped_by_frequency.case_a = defbundle(\
                                            "frequency_1", "obsmajor",\
                                            "frequency_2", "obsminor")

    matrix m = aggregate(y, self.frequency_series, mean)
    matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)
end function


function void group_y_by_freq_with_obsmicro (const series y,
                                            bundle *self)
    /* More complicate case, as we need to "aggregate out" one of the frequency structures before grouping. Aggregation is done by summing. */

    # 1) mplot_obsmajor_by_obsminor --> aggregate across obsmicro
    bundle self.y_grouped_by_frequency.case_a = defbundle(\
                                            "frequency_1", "obsmajor",\
                                            "frequency_2", "obsminor")
    list groupby = self.frequency_series
    groupby -= obsmicro
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)

    # 2) mplot_obsmajor_by_obsmicro --> aggregate across obsminor
    bundle self.y_grouped_by_frequency.case_b = defbundle(\
                                            "frequency_1", "obsmajor",\
                                            "frequency_2", "obsmicro")
    list groupby = self.frequency_series
    groupby -= obsminor
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_b.matdata = drop_count_column(m)

    # 3) mplot_obsminor_by_obsmicro --> aggregate across obsmajor
    bundle self.y_grouped_by_frequency.case_c = defbundle(\
                                            "frequency_1", "obsminor",\
                                            "frequency_2", "obsmicro")
    list groupby = self.frequency_series
    groupby -= obsmajor
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_c.matdata = drop_count_column(m)
end function


function matrix drop_count_column (matrix m)
    /* Drop "count" column. */

    cnames_old = cnameget(m)
    scalar pos = instrings(cnames_old, "count")
    cnames_new = strdrop(cnames_old, "count")

    m = m[,-pos]
    cnameset(m, cnames_new)

    return m
end function


function strings sublot_order (void)
    /* Set the order for subplots. */

    strings sublot_order = defarray(\
                            "obsmajor_by_obsminor",\
                            "obsmajor_by_obsmicro",\
                            "obsminor_by_obsmajor",\
                            "obsminor_by_obsmicro",\
                            "obsmicro_by_obsmajor",\
                            "obsmicro_by_obsminor")

    return sublot_order
end function


function void compile_subplots (bundle *self)
    /* Compile all combinations of plots and store gp-file names */

    scalar n_combinations = nelem(getkeys(self.data_to_plot))
    strings sublot_combs = sublot_order()
    scalar counter = 1
    strings self.gp_filenames = array(0)

    loop foreach i sublot_combs
        string matname = sprintf("mplot_%s", sublot_combs[i])

        if inbundle(self.data_to_plot, @matname)
            # a matrix with a single row cannot be drawn
            if rows(self.data_to_plot[matname]) > 1
                self.gp_filenames = self.gp_filenames + sprintf("seasplot_%s.gp", sublot_combs[i])
                seasplot(self.data_to_plot[matname], self.gp_filenames[counter])
                counter++
            endif
        endif

        if counter > n_combinations
            break
        endif
    endloop
end function


function void seasplot (const matrix x,
                        const string filename)
    /* Execute actual plotting. */

    plot x
        options with-lp fit=none
        printf "set xlabel ''"
        literal set grid
    end plot --output="@filename"
end function


function list get_frequency_series (bundle *self)
    /* Retrieve up to 3 frequency series. */

    list L = null
    strings keys = getkeys(self.frequency_components)

    loop foreach i keys
        if self.frequency_components["$i"] == TRUE
            string vname = sprintf("$%s", "$i")
            list L += genseries("$i", @vname)
        endif
    endloop

    return L
end function


function void flag_frequency_components (const series y,
                                        bundle *self)
    /* Set flags for the 3 separate frequency components. */

    bundle self.frequency_components = defbundle(\
                                    "obsmajor", FALSE,\
                                    "obsminor", FALSE,\
                                    "obsmicro", FALSE)

    if $pd > 1
        self.frequency_components.obsmajor = TRUE
        self.frequency_components.obsminor = TRUE
    endif

    if maxr($pd .= {5, 6, 7})
        self.frequency_components.obsmicro = TRUE
    endif
end function
