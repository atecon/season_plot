function void season_plot_gui (const series y,
                               int Frequency[1:4:1] "Freq. to _show on x-axis" {"major (usually year)", "minor (usually Q or M)", "micro (usually day)", "all"},
                               const int plot_width[::900] "Width of plot",
                               const int plot_height[::600] "Height of plot",
                               const int font_size[2::12] "Font size")
    /* Helper function for GUI access. */

    bundle opts = _(plot_width,
                    plot_height,
                    font_size)

    if Frequency <= 3
        string type = get_supported_types()[Frequency]
    else
        string type = "all"
    endif

    bundle B = set_season_plot(y, argname(y)) + opts

    do_season_plot(B, type, "display")
end function


function bundle set_season_plot (const series y,
                                 const string name_y[null] "Only for GUI access")
    /*  Compile matrices holding grouped data for plotting, and write the gnuplot-files. */

    errorif($pd == 1, "Time-series has no seasonal frequency.")

    smpl y --contiguous

    # Initializations
    bundle self = _()
    string self.name_y = (exists(name_y) ? name_y : argname(y))

    flag_frequency_components(y, &self)
    list self.frequency_series = get_frequency_series(&self)
    get_frequency_strings(&self)
    group_y_by_frequencies(y, &self)
    do_pivoting(y, &self)

    return self
end function


function void do_season_plot (bundle self,
                              const string type "Freq. to show on x-axis",
                              string filename[null])
    /* Do actualy plotting. User selects which frequency component to put on the x-axis. */

    if self.frequency_components.obsmicro == FALSE
        errorif(instring(type, "micro"), "Data set has no 'obsmicro' frequency component.")
    endif
    check_type(type)

    string filename = exists(filename) ? filename : "display"
    compile_subplots(&self)

    if type == "all"
        plot_all(self, filename)
    else
        plot_single(self, type, filename)
    endif
end function


function string get_plot_opts_string (const bundle self)
    /* Convert bundle items referring to gridplot options into string which can be used
       for the gridplot command. */

    bundle plot_opts = get_plot_opts_from_self(self)
    bundle B = plot_opts + multiplot_settings()
    string s = ""

    s += sprintf("--fontsize=%d ", int(B.font_size))
    s += sprintf("--width=%d ", int(B.plot_width))
    s += sprintf("--height=%d ", int(B.plot_height))
    if B.title != ""
        s += sprintf("--title=\"%s\" ", B.title)
    endif
    if ok(B.rows)
        s += sprintf("--rows=%d ", int(B.rows))
    endif
    if ok(B.cols)
        s += sprintf("--cols=%d ", int(B.cols))
    endif

    return s
end function

function strings get_supported_types (void)
    /* Return the supported frequency components. */

    strings supported_types = defarray("obsmajor", "obsminor", "obsmicro", "all")
    return supported_types
end function

function void check_type (const string type)
    /* Check if type is one of the allowed types. */

    errorif(!instrings(get_supported_types(), type, TRUE),
            sprintf("Invalid frequency component: %s. Allowed types are: '%s'", type, flatten(get_supported_types(), ", ")))
end function


function void plot_all (const bundle self,
                        const string filename)
    /* Plot all plots on single canvas. */

    string plot_opts = get_plot_opts_string(self)
    strings F = self.gp_filenames
    gridplot F --output="@filename" @plot_opts
end function


function void plot_single (const bundle self,
                           const string type,
                           const string filename)
    /* Create for each plot an own canvas. */

    string plot_opts = get_plot_opts_string(self)
    strings to_be_plotted = array(0)

    loop foreach i self.gp_filenames
        if instring("$i", sprintf("%s_by", type))
            to_be_plotted += "$i"
        endif
    endloop

    gridplot to_be_plotted --output="@filename" @plot_opts
end function


function bundle get_plot_opts_from_self (const bundle self)
    /* Put passed parameters for multiplot() function into a separate bundle. */

    bundle B = _()
    strings valid_keys = getkeys(multiplot_settings())

    loop foreach i valid_keys
        if inbundle(self, "$i")
            B["$i"] = self["$i"]
        endif
    endloop

    return B
end function


function bundle multiplot_settings (void)
    /* Settings for gridplot command. */

    bundle opts = _()
    scalar opts.plot_width = 900
    scalar opts.plot_height = 600
    scalar opts.font_size = 12
    string opts.title = ""  # refers to the global title
    scalar opts.rows = NA
    scalar opts.cols = NA
    scalar opts.point_size = 1

    return opts
end function


function void do_pivoting (const series y, bundle *self)
    /* Wrapper for calling the actual pivoting steps. */

    bundle self.data_to_plot = _()
    strings cases = getkeys(self.y_grouped_by_frequency)

    loop foreach i cases
        # Retrieve information
        string s1 = self.y_grouped_by_frequency["$i"].frequency_1
        string s2 = self.y_grouped_by_frequency["$i"].frequency_2

        # loop over two combinations, e.g. major-minor, minor-major
        loop j=1..2
            string first = (j == 1) ? s1 : s2
            string second = (j == 1) ? s2 : s1
            string name = sprintf("mplot_%s_by_%s", first, second)

            matrix self.data_to_plot.@name = pivot_by_column_name(self.y_grouped_by_frequency["$i"].matdata, first, second, "f(x)", self)
        endloop
    endloop
end function


function void get_frequency_strings (bundle *self)
    /* Get string abbreviations for each frequency component. */

    if maxr($pd .= {5, 6, 7})
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Year",
                                        "obsminor", "Month",
                                        "obsmicro", "Day")
    elif $pd == 12
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Year",
                                        "obsminor", "Month")
    elif $pd == 4
        bundle self.frequency_strings = defbundle(\
                                        "obsmajor", "Year",
                                        "obsminor", "Quarter")
    endif
end function


# TODO: put into separate small package
# TODO: add another function pivot() where column indizes instead of names are passed
# TODO: Both 'column' and 'values' may be arrays.
function matrix pivot_by_column_name (const matrix m,
                        const string index "Column to use for new index, xaxis",
                        const string split_column "Add columns using distinct values",
                        const string values "Column to use for populating new matrix values",
                        const bundle self)
    /* Transform matrix from long to wide format; also known as pivoting. Inspired by Pandas' pivot() function:
    https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html
    */

    string frequency_label = substr(self.frequency_strings["@split_column"], 1, 1)
    matrix result = {}

    scalar pos_values = instrings(cnameget(m), values)
    scalar pos_split_column = instrings(cnameget(m), split_column)
    scalar pos_index_column = instrings(cnameget(m), index)

    matrix split_values = values(m[, pos_split_column])
    strings colnames = array(1 + rows(split_values))

    # Drop split column from "m"
    matrix split_vector = m[, pos_split_column]
    matrix values_vector = m[, pos_values]
    matrix index_vector = values(m[, pos_index_column]) # will be the x-axis in the following plot

    loop i = 1..rows(split_values)
        matrix mask = (split_vector .= split_values[i])
        result ~= selifr(values_vector, mask)
        colnames[i] = sprintf("%s%d", frequency_label, split_values[i])
    endloop

    result ~= index_vector
    colnames[1 + rows(split_values)] = cnameget(m, pos_index_column)
    cnameset(result, colnames)

    return result
end function


function void group_y_by_frequencies (const series y,
                                      bundle *self)
    /* Wrapper for grouping y by frequencies dependent on data set. */

    bundle self.y_grouped_by_frequency = _()

    if self.frequency_components.obsmicro == FALSE
        group_y_by_freq_no_obsmicro(y, &self)
    else
        group_y_by_freq_with_obsmicro(y, &self)
    endif
end function


function void add_frequency_case_bundles (bundle *self, string case "a, b or c")
    /* Compile bundle holding the keywords for both frequencies needed for grouping. */

    if case == "a"
        bundle self.y_grouped_by_frequency.case_a = defbundle(\
                                            "frequency_1", "obsmajor",\
                                            "frequency_2", "obsminor")
    elif case == "b"
        bundle self.y_grouped_by_frequency.case_b = defbundle(\
                                            "frequency_1", "obsmajor",\
                                            "frequency_2", "obsmicro")
    elif case == "c"
        bundle self.y_grouped_by_frequency.case_c = defbundle(\
                                            "frequency_1", "obsminor",\
                                            "frequency_2", "obsmicro")
    endif
end function


function void group_y_by_freq_no_obsmicro (const series y,
                                          bundle *self)
    /* Group y by obsmajor and obsminor. This is only relevant in case data set has no obsmicro structure -- simplest case. */

    add_frequency_case_bundles(&self, "a")

    matrix m = aggregate(y, self.frequency_series, mean)
    matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)
end function


function void group_y_by_freq_with_obsmicro (const series y,
                                            bundle *self)
    /* More complicate case, as we need to "aggregate out" one of the frequency structures before grouping. Aggregation is done by summing. */

    # 1) mplot_obsmajor_by_obsminor --> aggregate across obsmicro
    add_frequency_case_bundles(&self, "a")
    list groupby = self.frequency_series
    groupby -= obsmicro
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_a.matdata = drop_count_column(m)

    # 2) mplot_obsmajor_by_obsmicro --> aggregate across obsminor
    add_frequency_case_bundles(&self, "b")
    list groupby = self.frequency_series
    groupby -= obsminor
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_b.matdata = drop_count_column(m)

    # 3) mplot_obsminor_by_obsmicro --> aggregate across obsmajor
    add_frequency_case_bundles(&self, "c")
    list groupby = self.frequency_series
    groupby -= obsmajor
    matrix m = aggregate(y, groupby, sum)
    matrix self.y_grouped_by_frequency.case_c.matdata = drop_count_column(m)
end function


function matrix drop_count_column (matrix m)
    /* Drop "count" column. */

    strings cnames_old = cnameget(m)
    scalar pos = instrings(cnames_old, "count")     # breaks of no 'count' col exists
    cnames_new = cnames_old - "count"

    m = m[,-pos]
    cnameset(m, cnames_new)

    return m
end function


function strings sublot_order (void)
    /* Set the order for subplots. */

    strings sublot_order = defarray(\
                            "obsmajor_by_obsminor",\
                            "obsmajor_by_obsmicro",\
                            "obsminor_by_obsmajor",\
                            "obsminor_by_obsmicro",\
                            "obsmicro_by_obsmajor",\
                            "obsmicro_by_obsminor")

    return sublot_order
end function


function void compile_subplots (bundle *self)
    /* Compile all combinations of plots, store these as gp-files and save the file names. */

    scalar n_combinations = nelem(getkeys(self.data_to_plot))
    strings sublot_combs = sublot_order()
    scalar counter = 1
    strings self.gp_filenames = array(0)

    loop foreach i sublot_combs
        string matname = sprintf("mplot_%s", sublot_combs[i])

        if inbundle(self.data_to_plot, @matname)
            # a matrix with a single row cannot be drawn
            if rows(self.data_to_plot[matname]) > 1
                # TODO: Later think about writing the ouput to a buffer (string array) instead of a file
                self.gp_filenames += sprintf("%s/seasplot_%s.gp", $dotdir, sublot_combs[i])
                seasplot(matname, self.gp_filenames[counter], self)
                counter++
            endif
        endif

        if counter > n_combinations
            break
        endif
    endloop
end function


function void seasplot (const string matname,
                        const string filename,
                        const bundle self)
    /* Execute actual plotting. Create the "gpfile_id"-th figure. */

    matrix m = self.data_to_plot[matname]
    strings cnames = cnameget(m)
    bundle plotops = multiplot_settings()
    scalar point_size = exists(self.point_size) ? self.point_size : plotops.point_size

    plot m
        options fit=none with-lp
        printf "set xlabel '%s'", self.frequency_strings[cnames[nelem(cnames)]]
        printf "set ylabel '%s'", self.name_y
        literal set grid
        printf "set for [i=1:40] linetype i ps %d", point_size
    end plot --output="@filename"
end function


function list get_frequency_series (bundle *self)
    /* Retrieve up to 3 frequency series. */

    list L = empty
    strings keys = getkeys(self.frequency_components)

    loop foreach i keys
        if self.frequency_components["$i"] == TRUE
            string vname = sprintf("$%s", "$i")
            list L += genseries("$i", @vname)
        endif
    endloop

    return L
end function


function void flag_frequency_components (const series y,
                                        bundle *self)
    /* Set flags for the 3 separate frequency components. */

    bundle self.frequency_components = _(obsmajor = FALSE,
                                         obsminor = FALSE,
                                         obsmicro = FALSE)

    if $pd > 1
        self.frequency_components.obsmajor = TRUE
        self.frequency_components.obsminor = TRUE
    endif

    if maxr($pd .= {5, 6, 7})
        self.frequency_components.obsmicro = TRUE
    endif
end function
